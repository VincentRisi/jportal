package bbd.binu.parser;

COMPILER CliBin

  public TJProc proc;
  TJField   field;
  int bindIndex, inpIndex, outIndex, dynIndex, lineIndex;
  TJDynamic dyn; 
                          
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
  digit = "0123456789".
  cr = '\r'.
  lf = '\n'.
  tab = '\t'.
  butGrave = ANY - '`'.

TOKENS
  ident  = letter {letter | digit}.
  number = digit {digit}.
  line   = '`' { butGrave } '`'.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

PRODUCTIONS
  CliBin = Conn Proc { Outs } {Inps } { Dyns } { Binds } { Line }
  .
    
  Conn =
    "conn" ident
    (. 
      proc = new TJProc();
      String database = t.val;
      proc.database = database; 
     .)
    [ ident
      (. 
        String server = t.val;
        proc.server = server; 
       .)
      ident
      (. 
        String schema = t.val;
        proc.schema = schema; 
       .)    
      [  ident
        (. 
          String user = t.val;
          proc.user = user; 
         .)    
        ident
        (. 
          String password = t.val;
          proc.password = password; 
         .)    
      ]
    ]
  .

  Proc =
    "proc" ident  
    (. 
      String table = t.val;
      proc.table = table; 
     .)
    ident
    (. 
      String name = t.val;
      proc.name = name; 
     .)
    "(" number    
        (. 
          Integer noRows = new Integer(t.val);
          proc.noRows  = noRows.intValue(); 
         .)
        number        
        (. 
          Integer noLines = new Integer(t.val);
          proc.noLines = noLines.intValue(); 
          proc.lines = new TJLine [proc.noLines];
          lineIndex = 0;
         .)
        number        
        (. 
          Integer noBinds = new Integer(t.val);
          proc.noBinds = noBinds.intValue(); 
          proc.binds = new int [proc.noBinds];
          bindIndex = 0;
         .)
        number        
        (. 
          Integer noOuts = new Integer(t.val);
          proc.noOuts = noOuts.intValue(); 
          proc.outs = new TJField [proc.noOuts];
          outIndex = 0;
         .)
        number        
        (. 
          Integer noInps = new Integer(t.val);
          proc.noInps = noInps.intValue(); 
          proc.inps = new TJField [proc.noInps];
          inpIndex = 0;
         .)
        number        
        (. 
          Integer noDyns = new Integer(t.val);
          proc.noDyns = noDyns.intValue(); 
          proc.dyns = new TJDynamic [proc.noDyns];
          dynIndex = 0;
         .)
      [ number
        (. 
          Integer recSize = new Integer(t.val);
          proc.recSize  = recSize.intValue(); 
         .) 
      ]
      "["           
      (. 
        proc.resetOptions();         
       .)
      { ProcOptions }
      "]" 
    ")"
  .
    
  ProcOptions =  
      "PRC"       (. proc.isProc        = true; .)
    | "SPR"       (. proc.isSProc       = true; .)
    | "DAT"       (. proc.isData        = true; .) 
    | "IDL"       (. proc.isIdlCode     = true; .) 
    | "SQL"       (. proc.isSql         = true; .) 
    | "SNG"       (. proc.isSingle      = true; .) 
    | "ACT"       (. proc.isAction      = true; .) 
    | "STD"       (. proc.isStd         = true; .) 
    | "USE"       (. proc.useStd        = true; .) 
    | "EXT"       (. proc.extendsStd    = true; .) 
    | "KEY"       (. proc.useKey        = true; .) 
    | "IMG"       (. proc.hasImage      = true; .) 
    | "MUL"       (. proc.isMultipleInp = true; .) 
    | "INS"       (. proc.isInsert      = true; .) 
    | "RET"       (. proc.hasReturning  = true; .) 
  .

  Line =   
    line          
    (.
      String work = t.val;
      int i = lineIndex++; 
      int no = 1;
      int len = work.length();
      proc.lines[i].isVar = false;
      if (work.charAt(no) == '&')
        proc.lines[i].isVar = true; 
      if (proc.lines[i].isVar == true)
        no++;
      proc.lines[i].line = work.substring(no, len-1);
    .)
  .
    
  Binds =
    "binds" "(" { Bind } ")"
  .

  Bind =
    number        
    (. 
      Integer bind = new Integer(t.val);
      proc.binds[bindIndex++] = bind.intValue();        
     .)
  .  
    
  Outs =
    "out" ident   
    (. 
      field = proc.outs[outIndex++]; 
      String name = t.val;
      field.name = name; 
     .)
    Field
  .  
    
  Inps =
    "inp" ident
    (. 
      field = proc.inps[inpIndex++]; 
      String name = t.val;
      field.name = name; 
     .)
    Field
  .  
    
  Dyns =
    "dyn" ident   
    (.
      dyn = proc.dyns[dynIndex++];     
      String name = t.val;
      dyn.name = name; 
     .)
    "("
    number        
    (.                
      Integer length = new Integer(t.val);
      dyn.length = length.intValue();        
     .)
    number        
    (. 
      Integer offset = new Integer(t.val);
      dyn.offset = offset.intValue();
     .)
    ")"
  .  
    
  Field =
    "("
    number
    (. 
      Integer type = new Integer(t.val);
      field.type  = type.intValue(); 
     .)
    number
    (. 
      Integer length = new Integer(t.val);
      field.length  = length.intValue(); 
     .)
    number
    (. 
      Integer precision = new Integer(t.val);
      field.precision  = precision.intValue(); 
     .)
    number  
    (. 
      Integer scale = new Integer(t.val);
      field.scale  = scale.intValue(); 
     .)
    number
    (. 
      Integer offset = new Integer(t.val);
      field.offset  = offset.intValue(); 
     .)
    number
    (. 
      Integer size = new Integer(t.val);
      field.size  = size.intValue(); 
     .)
    "["           
    (.
      field.resetOptions();  
     .)
    { FieldOptions }
    "]"
    ")"
  .  

  FieldOptions =
      "PK"        (. field.isPrimaryKey = true; .)
    | "SEQ"       (. field.isSequence   = true; .)
    | "NULL"      (. field.isNull       = true; .)
    | "IN"        (. field.isIn         = true; .)
    | "OUT"       (. field.isOut        = true; .)
  .
    
END CliBin.

