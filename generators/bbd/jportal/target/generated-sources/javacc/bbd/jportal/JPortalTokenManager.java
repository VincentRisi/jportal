/* Generated By:JavaCC: Do not edit this line. JPortalTokenManager.java */
/// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// Copyright (c) from 1996 Vincent Risi
///
/// All rights reserved.
/// This program and the accompanying materials are made available
/// under the terms of the Common Public License v1.0
/// which accompanies this distribution and is available at
/// http://www.eclipse.org/legal/cpl-v10.html
/// Contributors:
///    Vincent Risi, Hennie Hammann
///    Dieter Rosch
/// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
package bbd.jportal;
import java.util.*;
import java.lang.*;
import java.io.*;

/** Token Manager. */
public class JPortalTokenManager implements JPortalConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
static private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(16, 0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 16;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(0, 11);
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 0:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(0, 11);
                  break;
               case 2:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  jjAddStates(3, 5);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 141)
                     kind = 141;
                  break;
               case 4:
                  if (curChar == 10 && kind > 141)
                     kind = 141;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 12:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 13:
                  if (curChar == 10 && kind > 142)
                     kind = 142;
                  break;
               case 14:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x2400L & l) != 0L && kind > 142)
                     kind = 142;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  jjCheckNAddStates(0, 2);
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 1:
                  if ((0x200000002L & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  jjAddStates(3, 5);
                  break;
               case 6:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 7:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 16 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(16, 0);
}
static private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 16;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                  }
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(0, 11);
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 0:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(0, 11);
                  break;
               case 2:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  jjAddStates(3, 5);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 138)
                     kind = 138;
                  break;
               case 4:
                  if (curChar == 10 && kind > 138)
                     kind = 138;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 12:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 13:
                  if (curChar == 10 && kind > 139)
                     kind = 139;
                  break;
               case 14:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x2400L & l) != 0L && kind > 139)
                     kind = 139;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  jjCheckNAddStates(0, 2);
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 1:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  jjAddStates(3, 5);
                  break;
               case 6:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 7:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 16 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(4, 0);
      case 10:
         jjmatchedKind = 3;
         return jjMoveNfa_0(4, 0);
      case 13:
         jjmatchedKind = 4;
         return jjMoveNfa_0(4, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(4, 0);
      case 40:
         jjmatchedKind = 122;
         return jjMoveNfa_0(4, 0);
      case 41:
         jjmatchedKind = 125;
         return jjMoveNfa_0(4, 0);
      case 44:
         jjmatchedKind = 118;
         return jjMoveNfa_0(4, 0);
      case 46:
         jjmatchedKind = 146;
         return jjMoveNfa_0(4, 0);
      case 58:
         jjmatchedKind = 117;
         return jjMoveNfa_0(4, 0);
      case 59:
         jjmatchedKind = 126;
         return jjMoveNfa_0(4, 0);
      case 61:
         jjmatchedKind = 119;
         return jjMoveNfa_0(4, 0);
      case 64:
         jjmatchedKind = 116;
         return jjMoveNfa_0(4, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x680L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x77800L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x2f80000L, 0x800000000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x3ffc000000L, 0x1000000000000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0xc000000000L, 0x6000000000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x70000000000L, 0x200L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x3f00000000000L, 0x0L);
      case 75:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x30000000000000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x1c0000000000000L, 0x40000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0xe00000000000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x5000000000000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x7L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xbf9e0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1700000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3be000000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000400L);
      case 88:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000L);
      case 91:
         jjmatchedKind = 121;
         return jjMoveNfa_0(4, 0);
      case 93:
         jjmatchedKind = 124;
         return jjMoveNfa_0(4, 0);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x680L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x77800L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2f80000L, 0x800000000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x3ffc000000L, 0x1000000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xc000000000L, 0x6000000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x70000000000L, 0x200L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3f00000000000L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x30000000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1c0000000000000L, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0xe00000000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x5000000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x7L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xbf9e0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1700000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3be000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000400L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000L);
      case 123:
         jjmatchedKind = 120;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7fc000000000L);
      case 125:
         jjmatchedKind = 123;
         return jjMoveNfa_0(4, 0);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 0);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x820000001c180000L, active1, 0x1000040100001L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x21000000020L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0x100000000000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x48000fe0000000L, active1, 0x79d8L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000L, active1, 0x8400L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000003800L, active1, 0x80402610000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000004080L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0x2000000000L);
      case 78:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3800000000000L, active1, 0x6000004000000L);
      case 79:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4a0041000800000L, active1, 0x800000000000L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0x4038000000L);
      case 81:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0x40000000206L);
      case 83:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x408180000000L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200080000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x4900000002030400L, active1, 0x200000000000L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000000L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000040000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x820000001c180000L, active1, 0x1000040100001L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x21000000020L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0x100000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x48000fe0000000L, active1, 0x79d8L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000L, active1, 0x8400L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000003800L, active1, 0x80402610000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000004080L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0x2000000000L);
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3800000000000L, active1, 0x6000004000000L);
      case 111:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4a0041000800000L, active1, 0x800000000000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0x4038000000L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0x40000000206L);
      case 115:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x408180000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200080000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4900000002030400L, active1, 0x200000000000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000040000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(4, 1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(4, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x90000200000L, active1, 0x24000080008L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000020000000L, active1, 0L);
      case 68:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x6800038000000L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x104000400000L, active1, 0x140580000400L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0x200000000L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x3800L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x9000000020L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0x10004000002L);
      case 76:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x9000007800b0000L, active1, 0x19c0L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x600000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0xb0002000000000L, active1, 0x80000010000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x820000004000L, active1, 0x8204L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x1200000000000L, active1, 0x200000000000L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L);
      case 82:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000002000000L, active1, 0x4000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000800100000L, active1, 0x1L);
      case 84:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x500000001c040400L, active1, 0x1000000000010L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000800000L, active1, 0x400000000000L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000L);
      case 89:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x90000200000L, active1, 0x24000080008L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000020000000L, active1, 0L);
      case 100:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x6800038000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x104000400000L, active1, 0x140580000400L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0x200000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x3800L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x9000000020L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0x10004000002L);
      case 108:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x9000007800b0000L, active1, 0x19c0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x600000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0xb0002000000000L, active1, 0x80000010000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x820000004000L, active1, 0x8204L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1200000000000L, active1, 0x200000000000L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L);
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000002000000L, active1, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000800100000L, active1, 0x1L);
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x500000001c040400L, active1, 0x1000000000010L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000800000L, active1, 0x400000000000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000L);
      case 121:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(4, 2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(4, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 2);
   }
   switch(curChar)
   {
      case 56:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 3;
         }
         break;
      case 65:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x22044000000L, active1, 0x41038000000L);
      case 66:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 67:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000500000L, active1, 0x2020000000000L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4200000000008L);
      case 69:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x282000790000000L, active1, 0x100004019e0L);
      case 71:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40010000000000L, active1, 0x10000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000800L, active1, 0L);
      case 75:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000030000L, active1, 0L);
      case 76:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0x100000100000L);
      case 77:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000800000L, active1, 0x80000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000400L, active1, 0x8000000000L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0x400000000000L);
      case 81:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000L);
      case 82:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4180008400L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x8002001000L, active1, 0x80000000001L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0x40000000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000000000L, active1, 0x2010L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000L);
      case 87:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 3;
         }
         break;
      case 88:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0L);
      case 97:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x22044000000L, active1, 0x41038000000L);
      case 98:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 99:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000500000L, active1, 0x2020000000000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4200000000008L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x282000790000000L, active1, 0x100004019e0L);
      case 103:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40010000000000L, active1, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000800L, active1, 0L);
      case 107:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000030000L, active1, 0L);
      case 108:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0x100000100000L);
      case 109:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000800000L, active1, 0x80000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000400L, active1, 0x8000000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0x400000000000L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000L);
      case 114:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4180008400L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8002001000L, active1, 0x80000000001L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0x40000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000000000L, active1, 0x2010L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000L);
      case 119:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 3;
         }
         break;
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(4, 3);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(4, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000020100000L, active1, 0x4200000000002L);
      case 66:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x19c0L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L, active1, 0x40000080000L);
      case 69:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0x180000006000L);
      case 72:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000010000L, active1, 0x80000000L);
      case 75:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 4;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0x10000L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000002000L, active1, 0x4040000020L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000002000000L, active1, 0x2000000000008L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000000L);
      case 82:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2200000000000L, active1, 0x10L);
      case 83:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100400000L);
      case 84:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x108790000400L, active1, 0x38000000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000004040020000L, active1, 0x4000000L);
      case 87:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x18000000001L);
      case 89:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000020100000L, active1, 0x4200000000002L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x19c0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L, active1, 0x40000080000L);
      case 101:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0x180000006000L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000010000L, active1, 0x80000000L);
      case 107:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 4;
         }
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0x10000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000002000L, active1, 0x4040000020L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000002000000L, active1, 0x2000000000008L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000000L);
      case 114:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2200000000000L, active1, 0x10L);
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100400000L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x108790000400L, active1, 0x38000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000004040020000L, active1, 0x4000000L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x18000000001L);
      case 121:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(4, 4);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(4, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 4);
   }
   switch(curChar)
   {
      case 65:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0x80000L);
      case 68:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L, active1, 0x2000000000000L);
      case 69:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x700000800L, active1, 0x60030000000L);
      case 71:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x102010000400L, active1, 0L);
      case 76:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L, active1, 0x400000000000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000010000L, active1, 0x2018L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000001L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000020000L, active1, 0L);
      case 81:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L, active1, 0L);
      case 82:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0x80000000002L);
      case 83:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8040000000L);
      case 84:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0x4300100401980L);
      case 97:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0x80000L);
      case 100:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L, active1, 0x2000000000000L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x700000800L, active1, 0x60030000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x102010000400L, active1, 0L);
      case 108:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L, active1, 0x400000000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000010000L, active1, 0x2018L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000001L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000020000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L, active1, 0L);
      case 114:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0x80000000002L);
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8040000000L);
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0x4300100401980L);
      case 125:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(4, 5);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(4, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 5);
   }
   switch(curChar)
   {
      case 65:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0x100400080L);
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0x20000100L);
      case 67:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0L);
      case 69:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x300000000000L);
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000010L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0x8L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000400L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L, active1, 0x10000000000L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0x1800L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000080001L);
      case 83:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x4010000L, active1, 0L);
      case 84:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0x80040000000L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L, active1, 0L);
      case 89:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 6;
         }
         break;
      case 97:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0x100400080L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0x20000100L);
      case 99:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x300000000000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000010L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0x8L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000400L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L, active1, 0x10000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0x1800L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000080001L);
      case 115:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x4010000L, active1, 0L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0x80040000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L, active1, 0L);
      case 121:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 6;
         }
         break;
      case 125:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 6;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(4, 6);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(4, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 6);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L, active1, 0x40000000L);
      case 68:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 7;
         }
         break;
      case 69:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x11400L, active1, 0x400000000000L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L, active1, 0x10000000080L);
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100400000L);
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L, active1, 0x1810L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000L);
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L, active1, 0L);
      case 89:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 7;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L, active1, 0x40000000L);
      case 100:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 7;
         }
         break;
      case 101:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x11400L, active1, 0x400000000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L, active1, 0x10000000080L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100400000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L, active1, 0x1810L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L, active1, 0L);
      case 121:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 7;
         }
         break;
      case 125:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 7;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(4, 7);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(4, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 7);
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000000L);
      case 69:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800L);
      case 71:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 8;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L, active1, 0L);
      case 76:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 8;
         }
         break;
      case 77:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L, active1, 0L);
      case 80:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 8;
         }
         break;
      case 82:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000000L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000000L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800L);
      case 103:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 8;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L, active1, 0L);
      case 108:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 8;
         }
         break;
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L, active1, 0L);
      case 112:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 8;
         }
         break;
      case 114:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(4, 8);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(4, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 8);
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800L);
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L, active1, 0L);
      case 69:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 9;
         }
         break;
      case 80:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 9;
         }
         break;
      case 84:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0xc00L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L, active1, 0L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 9;
         }
         break;
      case 112:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 9;
         }
         break;
      case 116:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0xc00L, active1, 0L);
      case 125:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 9;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(4, 9);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(4, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 9);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L, active1, 0L);
      case 69:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 10;
         }
         break;
      case 89:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 10;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L, active1, 0L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 10;
         }
         break;
      case 121:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 10;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(4, 10);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(4, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 10);
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa12_0(active0, 0x400L);
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x400L);
      default :
         break;
   }
   return jjMoveNfa_0(4, 11);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(4, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 11);
   }
   switch(curChar)
   {
      case 80:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 12;
         }
         break;
      case 112:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 12;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(4, 12);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 151;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAdd(17);
                  }
                  else if ((0x1800000000L & l) != 0L)
                  {
                     if (kind > 131)
                        kind = 131;
                     jjCheckNAdd(30);
                  }
                  else if (curChar == 47)
                     jjAddStates(6, 7);
                  else if (curChar == 39)
                     jjCheckNAddStates(8, 10);
                  else if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  else if (curChar == 48)
                  {
                     if (kind > 127)
                        kind = 127;
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if (curChar == 42)
                     jjCheckNAddStates(14, 16);
                  break;
               case 10:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 11:
               case 12:
                  if (curChar == 10 && kind > 115)
                     kind = 115;
                  break;
               case 13:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 15:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if (curChar == 48 && kind > 127)
                     kind = 127;
                  break;
               case 19:
                  if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  break;
               case 20:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 22:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 23:
                  if (curChar == 34 && kind > 128)
                     kind = 128;
                  break;
               case 24:
                  if (curChar == 39)
                     jjCheckNAddStates(8, 10);
                  break;
               case 25:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 27:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 28:
                  if (curChar == 39 && kind > 128)
                     kind = 128;
                  break;
               case 29:
                  if ((0x1800000000L & l) == 0L)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjCheckNAdd(30);
                  break;
               case 32:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x9d00000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 34:
                  if ((0x3ff009d00000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar == 39 && kind > 132)
                     kind = 132;
                  break;
               case 69:
                  if (curChar == 47)
                     jjAddStates(6, 7);
                  break;
               case 70:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 71:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 72:
                  if (curChar == 42)
                     jjAddStates(17, 18);
                  break;
               case 73:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(74, 72);
                  break;
               case 74:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(74, 72);
                  break;
               case 75:
                  if (curChar == 47 && kind > 5)
                     kind = 5;
                  break;
               case 76:
                  if (curChar == 47)
                     jjCheckNAddStates(19, 21);
                  break;
               case 77:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 78:
               case 79:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 80:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 100:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(22, 24);
                  break;
               case 101:
                  if ((0x2400L & l) != 0L && kind > 137)
                     kind = 137;
                  break;
               case 102:
                  if (curChar == 10 && kind > 137)
                     kind = 137;
                  break;
               case 103:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 110:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(25, 27);
                  break;
               case 111:
                  if ((0x2400L & l) != 0L && kind > 140)
                     kind = 140;
                  break;
               case 112:
                  if (curChar == 10 && kind > 140)
                     kind = 140;
                  break;
               case 113:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 142:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(28, 30);
                  break;
               case 143:
                  if ((0x2400L & l) != 0L && kind > 143)
                     kind = 143;
                  break;
               case 144:
                  if (curChar == 10 && kind > 143)
                     kind = 143;
                  break;
               case 145:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 131)
                        kind = 131;
                     jjCheckNAdd(30);
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjAddStates(31, 33);
                  else if ((0x800000008L & l) != 0L)
                     jjAddStates(34, 36);
                  else if ((0x8000000080000L & l) != 0L)
                     jjAddStates(37, 41);
                  else if ((0x200000002L & l) != 0L)
                     jjAddStates(42, 43);
                  else if ((0x400000004L & l) != 0L)
                     jjAddStates(44, 45);
                  else if ((0x80000000800000L & l) != 0L)
                     jjAddStates(46, 47);
                  else if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if ((0x4000000040000L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 1:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if ((0x400000004L & l) != 0L && kind > 87)
                     kind = 87;
                  break;
               case 6:
               case 130:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 7:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  jjAddStates(14, 16);
                  break;
               case 20:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 21:
                  if (curChar == 92)
                     jjCheckNAddStates(48, 51);
                  break;
               case 22:
                  if (curChar == 92)
                     jjCheckNAddStates(11, 13);
                  break;
               case 25:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 26:
                  if (curChar == 92)
                     jjCheckNAddStates(52, 55);
                  break;
               case 27:
                  if (curChar == 92)
                     jjCheckNAddStates(8, 10);
                  break;
               case 29:
               case 30:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 33:
               case 34:
                  if ((0x7fffffebffffffeL & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 36:
                  if ((0x80000000800000L & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 37:
                  if ((0x20000000200L & l) != 0L && kind > 99)
                     kind = 99;
                  break;
               case 38:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x4000000040000L & l) != 0L && kind > 99)
                     kind = 99;
                  break;
               case 42:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x400000004L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 50:
                  if ((0x400000004000L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 51:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x10000000100000L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 57:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0x200000002L & l) != 0L)
                     jjAddStates(42, 43);
                  break;
               case 59:
                  if ((0x20000000200L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 60:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x4000000040000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 63:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 71:
                  jjCheckNAddTwoStates(71, 72);
                  break;
               case 73:
               case 74:
                  jjCheckNAddTwoStates(74, 72);
                  break;
               case 77:
                  jjAddStates(19, 21);
                  break;
               case 81:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(37, 41);
                  break;
               case 82:
                  if ((0x1000000010L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 83:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if ((0x800000008L & l) != 0L && kind > 82)
                     kind = 82;
                  break;
               case 88:
               case 96:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(87);
                  break;
               case 89:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 97:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(22, 24);
                  break;
               case 104:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 105:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if ((0x200000002L & l) != 0L)
                     jjAddStates(25, 27);
                  break;
               case 114:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 115:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(34, 36);
                  break;
               case 120:
                  if ((0x10000000100000L & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 121:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(120);
                  break;
               case 122:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(120);
                  break;
               case 125:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 131:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if ((0x20000000200L & l) != 0L)
                     jjAddStates(31, 33);
                  break;
               case 133:
                  if ((0x10000000100000L & l) != 0L && kind > 50)
                     kind = 50;
                  break;
               case 134:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if ((0x4000000040000L & l) != 0L && kind > 50)
                     kind = 50;
                  break;
               case 136:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(28, 30);
                  break;
               case 146:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 147:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(14, 16);
                  break;
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(11, 13);
                  break;
               case 25:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(8, 10);
                  break;
               case 71:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 73:
               case 74:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(74, 72);
                  break;
               case 77:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(19, 21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 151 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static private int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(16, 0);
}
static private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 16;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 145)
                        kind = 145;
                  }
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(0, 11);
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 0:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(0, 11);
                  break;
               case 2:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjAddStates(3, 5);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 144)
                     kind = 144;
                  break;
               case 4:
                  if (curChar == 10 && kind > 144)
                     kind = 144;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 12:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 13:
                  if (curChar == 10 && kind > 145)
                     kind = 145;
                  break;
               case 14:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x2400L & l) != 0L && kind > 145)
                     kind = 145;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  jjCheckNAddStates(0, 2);
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 1:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjAddStates(3, 5);
                  break;
               case 6:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 7:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 16 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   12, 14, 15, 2, 3, 5, 70, 76, 25, 26, 28, 20, 21, 23, 10, 11, 
   13, 73, 75, 77, 78, 80, 100, 101, 103, 110, 111, 113, 142, 143, 145, 134, 
   140, 150, 123, 129, 131, 86, 95, 98, 108, 118, 61, 68, 55, 57, 40, 48, 
   20, 21, 22, 23, 25, 26, 27, 28, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\100", "\72", "\54", "\75", "\173", "\133", "\50", 
"\175", "\135", "\51", "\73", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\56", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "CODESTATE",
   "DATASTATE",
   "IDLSTATE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, 2, 0, -1, 3, 0, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0xffffffffffffffffL, 0x64819L, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 0x1b600L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x1b600L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[151];
static private final int[] jjstateSet = new int[302];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public JPortalTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public JPortalTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 151; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
