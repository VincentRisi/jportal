/* Generated By:JavaCC: Do not edit this line. IDL.java */
package bbd.crackle;

import java.util.*;
import java.io.*;

/**
* YET ANOTHER INTERFACE DEFINITION LANGUAGE
* Actually this started out as an IDL but ended up
* as a remote server C++ code compiler. It still can be
* used as an IDL
*/
public class IDL implements IDLConstants {
  protected static Module     module;
  protected static Structure  structure;
  protected static Enumerator enumerator;
  protected static Prototype  prototype;
  protected static Message    message;
  protected static Table      table;
  protected static Field      field;
  protected static Type       type;
  protected static Operation  operation;
  protected static Action     action;
  protected static Vector<Integer>     messageNos;
  static private   IDL parser;
  /**
  * Reads input from standard input
  */
  public static void main(String args[])
  {
    try
    {
      PrintWriter outLog = new PrintWriter(System.out);
      for (int i = 0; i <args.length; i++)
      {
        System.out.println(args[i]+": Parsing ...");
        Module module = run(args[i], outLog);
        System.out.println("Outputting "+module.name+".repository");
        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(module.name+".repository"));
        out.writeObject(module);
        out.close();
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }
  /**
  * Reads input from supplied file
  * @param  inFile is the input file to parse
  * @return Module from IDL package
  */
  public static Module run(String inFile, PrintWriter outLog)
  {
    try
    {
      FileReader inputReader = new FileReader(inFile);
      return run(inFile, inputReader, outLog);
    }
    catch (FileNotFoundException e)
    {
      e.printStackTrace();
      return null;
    }
  }
  public static Module run(String inFile, Reader reader, PrintWriter outLog)
  {
    try
    {
      parser = new IDL(reader);
      messageNos = new Vector<Integer>();
      parser.idlStart();
      module.sourceName = inFile;
      return module;
    }
    catch (Exception e)
    {
      outLog.println("ParseException ["+e.getMessage()+"]");
      e.printStackTrace();
      return null;
    }
  }
  static String uniqueNumber()
  {
    int procNumber = Module.hashCode(prototype.name);
    if (procNumber < 0)
      procNumber *= -1;
    Integer newNo;
    incProcNumber: for (;; procNumber++)
    {
      for (int i=0; i<messageNos.size(); i++)
      {
        Integer n = (Integer)messageNos.elementAt(i);
        if (n.intValue() == procNumber)
          continue incProcNumber;
      }
      newNo = new Integer(procNumber);
      messageNos.addElement(newNo);
      break;
    }
    return newNo.toString();
  }

  final public void idlStart() throws ParseException {
  Token t;
  String s;
  boolean hasLinemarker = false;
    jj_consume_token(MODULE);
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 50:
      jj_consume_token(50);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    module = new Module();
    module.name = t.image;
    module.hash(t.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      jj_consume_token(PACKAGE);
      s = idlPackage();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        jj_consume_token(50);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      module.packageName = s;
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERSION:
      jj_consume_token(VERSION);
      t = jj_consume_token(QSTRING);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        jj_consume_token(50);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      module.version = t.image;
      module.hash(t.image);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case ENUM:
      case FLOAT:
      case MODULE:
      case INT:
      case INT8:
      case INT16:
      case INT32:
      case INT64:
      case LONG:
      case MESSAGE:
      case SHORT:
      case STRING:
      case STRING2:
      case STRUCT:
      case TABLE:
      case UNSIGNED:
      case VOID:
      case WCHAR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case PRAGMA:
      case IDENTIFIER:
      case LINENO:
      case CODELINE:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINENO:
      case CODELINE:
        idlCodeBlock();
        break;
      default:
        jj_la1[6] = jj_gen;
        if (jj_2_1(2)) {
          idlStructure();
      module.structures.addElement(structure);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ENUM:
            idlEnum();
      module.enumerators.addElement(enumerator);
            break;
          default:
            jj_la1[7] = jj_gen;
            if (jj_2_2(2)) {
              idlPrototype();
      module.prototypes.addElement(prototype);
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case MESSAGE:
                idlMessage();
                break;
              case TABLE:
                idlTable();
      module.tables.addElement(table);
                break;
              case PRAGMA:
                t = jj_consume_token(PRAGMA);
      s = t.image;
      module.pragmas.addElement(s.substring(6));
                break;
              case MODULE:
                idlSubModule();
                break;
              default:
                jj_la1[8] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    }
  }

  final public void idlSubModule() throws ParseException {
    jj_consume_token(MODULE);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 50:
      jj_consume_token(50);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

  final public String idlPackage() throws ParseException {
  Token t;
  String s;
    t = jj_consume_token(IDENTIFIER);
    s = t.image;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_2;
      }
      jj_consume_token(51);
      t = jj_consume_token(IDENTIFIER);
      s = s+"."+t.image;
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public void idlCodeBlock() throws ParseException {
  Token t;
  boolean hasLinemarker = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LINENO:
      t = jj_consume_token(LINENO);
    if (module.codeStart == 0)
      module.codeStart = t.beginLine;
    hasLinemarker = true;
      module.code.addElement(t.image);
      break;
    case CODELINE:
      t = jj_consume_token(CODELINE);
    if (module.codeStart == 0)
      module.codeStart = t.beginLine;
    if (module.codeLine == 0 && hasLinemarker == false)
      module.codeLine = t.beginLine;
    module.code.addElement(t.image);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void idlMessage() throws ParseException {
  Token t;
  String s;
  Integer i;
    t = jj_consume_token(MESSAGE);
    if (module.messageStart == 0)
      module.messageStart = t.beginLine;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 52:
      jj_consume_token(52);
      t = jj_consume_token(INTEGER);
      jj_consume_token(53);
      s = t.image;
      i = new Integer(s);
      module.messageBase = i.intValue();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(54);
    label_3:
    while (true) {
      idlMsgElement();
      module.messages.addElement(message);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(55);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 50:
      jj_consume_token(50);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  final public void idlMsgElement() throws ParseException {
  Token t;
    t = jj_consume_token(IDENTIFIER);
    message = new Message();
    message.name = t.image;
    module.hash(t.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 56:
      jj_consume_token(56);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    t = jj_consume_token(QSTRING);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 50:
      jj_consume_token(50);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    message.value = t.image;
  }

  final public void idlTable() throws ParseException {
  Token t;
    jj_consume_token(TABLE);
    t = jj_consume_token(IDENTIFIER);
    table = new Table();
    table.name = t.image;
    jj_consume_token(54);
    label_4:
    while (true) {
      idlMsgElement();
      table.messages.addElement(message);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_4;
      }
    }
    jj_consume_token(55);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 50:
      jj_consume_token(50);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  final public void idlEnum() throws ParseException {
  Token t;
    jj_consume_token(ENUM);
    t = jj_consume_token(IDENTIFIER);
    enumerator = new Enumerator();
    enumerator.name = t.image;
    module.hash(t.image);
    jj_consume_token(54);
    idlEnumElement();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_5;
      }
      jj_consume_token(57);
      idlEnumElement();
    }
    jj_consume_token(55);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 50:
      jj_consume_token(50);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  final public void idlEnumElement() throws ParseException {
  Token t;
  String s;
    t = jj_consume_token(IDENTIFIER);
    s = t.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 56:
      jj_consume_token(56);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
        break;
      case CHARACTER:
        t = jj_consume_token(CHARACTER);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      s = s + " = " + t.image;
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    enumerator.elements.addElement(s);
  }

  final public void idlStructure() throws ParseException {
  Token t;
  boolean hasLinemarker = false;
    structure = new Structure();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
        jj_consume_token(PRIVATE);
      structure.codeType = Structure.PRIVATE;
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
      structure.codeType = Structure.PUBLIC;
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
      structure.codeType = Structure.PROTECTED;
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(STRUCT);
    t = jj_consume_token(IDENTIFIER);
    structure.name = t.image;
    structure.start = t.beginLine;
    module.hash(t.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QSTRING:
      t = jj_consume_token(QSTRING);
      structure.header = t.image;
      module.hash(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        jj_consume_token(52);
        t = jj_consume_token(IDENTIFIER);
        jj_consume_token(53);
        structure.categories.addElement(t.image);
        module.hash(t.image);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 54:
      jj_consume_token(54);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case INT8:
        case INT16:
        case INT32:
        case INT64:
        case LONG:
        case SHORT:
        case STRING:
        case STRING2:
        case UNSIGNED:
        case VOID:
        case WCHAR:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_6;
        }
        idlFielddef();
        jj_consume_token(50);
        structure.fields.addElement(field);
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LINENO:
        case CODELINE:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LINENO:
          t = jj_consume_token(LINENO);
      hasLinemarker = true;
      structure.code.addElement(t.image);
          break;
        case CODELINE:
          t = jj_consume_token(CODELINE);
        if (structure.codeLine == 0 && hasLinemarker == false)
          structure.codeLine = t.beginLine;
        structure.code.addElement(t.image);
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(55);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 50:
      jj_consume_token(50);
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
  }

  final public void idlFielddef() throws ParseException {
  Token t;
    field = new Field();
    type  = field.type;
    idlType();
    t = jj_consume_token(IDENTIFIER);
    field.name = t.image;
    module.hash(t.image);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 58:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_8;
      }
      idlArrayStuff();
    }
  }

  final public void idlType() throws ParseException {
    idlTypeLookup();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POINTER:
    case POINTERREF:
    case 58:
      idlAccessType();
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
  }

  final public void idlAccessType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POINTERREF:
      jj_consume_token(POINTERREF);
    module.hash("*&");
    type.reference = Type.BYREFPTR;
      break;
    case POINTER:
      jj_consume_token(POINTER);
    module.hash("*");
    type.reference = Type.BYPTR;
      break;
    case 58:
      jj_consume_token(58);
      jj_consume_token(59);
    module.hash("[]");
    type.reference = Type.ARRAYED;
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void idlTypeLookup() throws ParseException {
  Token t;
    idlUnsigned();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      type.name = "boolean";
      module.hash(type.name);
      type.typeof = Type.BOOLEAN;
      break;
    case CHAR:
      jj_consume_token(CHAR);
      type.name = "char";
      module.hash(type.name);
      type.typeof = Type.CHAR;
      break;
    case WCHAR:
      jj_consume_token(WCHAR);
      type.name = "wchar_t";
      module.hash(type.name);
      type.typeof = Type.WCHAR;
      break;
    case STRING:
    case STRING2:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        jj_consume_token(STRING);
        break;
      case STRING2:
        jj_consume_token(STRING2);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      type.name = "string";
      module.hash(type.name);
      type.typeof = Type.STRING;
      break;
    case BYTE:
    case INT8:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BYTE:
        jj_consume_token(BYTE);
        break;
      case INT8:
        jj_consume_token(INT8);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      type.name = "byte";
      module.hash(type.name);
      type.typeof = Type.BYTE;
      break;
    case INT16:
    case SHORT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHORT:
        jj_consume_token(SHORT);
        break;
      case INT16:
        jj_consume_token(INT16);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      type.name = "short";
      module.hash(type.name);
      type.typeof = Type.SHORT;
      break;
    case INT:
    case INT32:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        break;
      case INT32:
        jj_consume_token(INT32);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      type.name = "int";
      module.hash(type.name);
      type.typeof = Type.INT;
      break;
    case INT64:
    case LONG:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LONG:
        jj_consume_token(LONG);
        break;
      case INT64:
        jj_consume_token(INT64);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      type.name = "long";
      module.hash(type.name);
      type.typeof = Type.LONG;
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      type.name = "float";
      module.hash(type.name);
      type.typeof = Type.FLOAT;
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
      type.name = "double";
      module.hash(type.name);
      type.typeof = Type.DOUBLE;
      break;
    case VOID:
      jj_consume_token(VOID);
      type.name = "void";
      module.hash(type.name);
      type.typeof = Type.VOID;
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      type.name = t.image;
      module.hash(t.image);
      type.typeof = Type.USERTYPE;
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void idlUnsigned() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED:
      jj_consume_token(UNSIGNED);
      type.isUnsigned = true;
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
  }

  final public void idlArrayStuff() throws ParseException {
  Token t;
  String s;
  Integer i;
    jj_consume_token(58);
       i = new Integer(0);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
      s = t.image;
      module.hash(t.image);
      i = new Integer(s);
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    jj_consume_token(59);
    type.arraySizes.addElement(i);
  }

  final public void idlPrototype() throws ParseException {
  Token t;
    prototype = new Prototype();
    type  = prototype.type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
        jj_consume_token(PRIVATE);
      prototype.codeType = Prototype.PRIVATE;
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
      prototype.codeType = Prototype.PUBLIC;
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
      prototype.codeType = Prototype.PROTECTED;
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    idlType();
    t = jj_consume_token(IDENTIFIER);
    prototype.name = t.image;
    prototype.start = t.beginLine;
    module.hash(t.image);
    jj_consume_token(52);
    idlPrototypeParameters();
    jj_consume_token(53);
    jj_consume_token(54);
    idlPrototypeActions();
    jj_consume_token(55);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 50:
      jj_consume_token(50);
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
  }

  final public void idlPrototypeParameters() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INT8:
    case INT16:
    case INT32:
    case INT64:
    case LONG:
    case SHORT:
    case STRING:
    case STRING2:
    case UNSIGNED:
    case VOID:
    case WCHAR:
    case IDENTIFIER:
      idlFielddef();
      prototype.addParameter(field);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 57:
          ;
          break;
        default:
          jj_la1[46] = jj_gen;
          break label_9;
        }
        jj_consume_token(57);
        idlFielddef();
        prototype.addParameter(field);
      }
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
  }

  final public void idlPrototypeActions() throws ParseException {
  Token t;
  boolean hasLinemarker = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MESSAGE:
      jj_consume_token(MESSAGE);
      jj_consume_token(60);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          t = jj_consume_token(IDENTIFIER);
          break;
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        prototype.message = t.image;
        break;
      case 61:
        jj_consume_token(61);
        prototype.message = uniqueNumber();
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        jj_consume_token(50);
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INPUT:
      jj_consume_token(INPUT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 60:
        jj_consume_token(60);
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_10;
        }
        idlAction();
        prototype.addInput(action);
      }
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OUTPUT:
      jj_consume_token(OUTPUT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 60:
        jj_consume_token(60);
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[56] = jj_gen;
          break label_11;
        }
        idlAction();
        prototype.addOutput(action);
      }
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINENO:
      case CODELINE:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINENO:
        t = jj_consume_token(LINENO);
      hasLinemarker = true;
      prototype.code.addElement(t.image);
        break;
      case CODELINE:
        t = jj_consume_token(CODELINE);
      if (prototype.codeLine == 0 && hasLinemarker == false)
        prototype.codeLine = t.beginLine;
      prototype.code.addElement(t.image);
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void idlAction() throws ParseException {
  Token t;
    t = jj_consume_token(IDENTIFIER);
    action = new Action();
    action.name = t.image;
    module.hash(t.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIZE:
      idlOperation();
      action.addOperation(operation);
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
    jj_consume_token(50);
  }

  final public void idlOperation() throws ParseException {
  Token t;
    jj_consume_token(SIZE);
    jj_consume_token(52);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      operation = new Operation();
      operation.name = t.image;
      module.hash(t.image);
      operation.code = Operation.SIZE;
      operation.isConstant = false;
      break;
    case INTEGER:
      t = jj_consume_token(INTEGER);
      operation = new Operation();
      operation.name = t.image;
      module.hash(t.image);
      operation.code = Operation.SIZE;
      operation.isConstant = true;
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(53);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(WCHAR)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(UNSIGNED)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) return true;
    }
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(POINTER)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(POINTERREF)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    if (jj_scan_token(STRUCT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public IDLTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[62];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x20000,0x0,0x0,0xfbfdfc00,0x0,0x4000,0x41010000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x280,0x0,0x0,0x0,0x0,0x100,0x9afcbc00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000000,0x80800,0x2100000,0x240000,0xc00000,0x1afcbc00,0x80000000,0x80,0x0,0x0,0x0,0x0,0x9afcbc00,0x80,0x80,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x80,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x40000,0x40000,0x0,0x40000,0x1,0x30f86,0x30000,0x0,0x400,0x40000,0x80000,0x30000,0x100000,0x800,0x40000,0x1000000,0x40000,0x800,0x40000,0x2000000,0x40000,0x0,0x1000000,0x380,0x380,0x100000,0x0,0x806,0x30000,0x30000,0x400000,0x40000,0x4000000,0x4000018,0x4000018,0x0,0x0,0x0,0x0,0x0,0x806,0x0,0x0,0x380,0x380,0x40000,0x2000000,0x806,0x800,0x20000800,0x40000,0x0,0x10000000,0x800,0x20,0x10000000,0x800,0x40,0x30000,0x30000,0x0,0x800,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public IDL(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public IDL(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new IDLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public IDL(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new IDLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public IDL(IDLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(IDLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[62];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 62; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 62; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
