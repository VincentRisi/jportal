/* Generated By:JavaCC: Do not edit this line. IDLTokenManager.java */
package bbd.crackle;
import java.util.*;
import java.io.*;

/** Token Manager. */
public class IDLTokenManager implements IDLConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(38, 0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 41;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 38:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                  }
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjAddStates(7, 9);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 47)
                     kind = 47;
                  break;
               case 3:
                  if (curChar == 10 && kind > 47)
                     kind = 47;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 12:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(10, 12);
                  break;
               case 13:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 16:
                  if (curChar == 34)
                     jjCheckNAddStates(13, 15);
                  break;
               case 17:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 19:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 20:
                  if (curChar == 34)
                     jjCheckNAddStates(16, 18);
                  break;
               case 21:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 22:
                  if ((0x2400L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 23:
                  if (curChar == 10 && kind > 48)
                     kind = 48;
                  break;
               case 24:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 22);
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 27:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 29:
                  if (curChar == 48)
                     jjCheckNAdd(15);
                  break;
               case 33:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 35:
                  if ((0x2400L & l) != 0L && kind > 49)
                     kind = 49;
                  break;
               case 36:
                  if (curChar == 10 && kind > 49)
                     kind = 49;
                  break;
               case 37:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 39:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(39, 10);
                  break;
               case 40:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(40, 33);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 38:
                  jjCheckNAddStates(0, 2);
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 0:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 1:
                  jjCheckNAddStates(7, 9);
                  break;
               case 5:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 6:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 17:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 18:
                  if (curChar == 92)
                     jjAddStates(23, 25);
                  break;
               case 19:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 21:
                  jjAddStates(16, 18);
                  break;
               case 30:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 31:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 34:
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 38:
               case 34:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(7, 9);
                  break;
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(13, 15);
                  break;
               case 21:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(16, 18);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 41 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 3;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 4;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(0, 0);
      case 35:
         jjmatchedKind = 61;
         return jjMoveNfa_0(0, 0);
      case 40:
         jjmatchedKind = 52;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 53;
         return jjMoveNfa_0(0, 0);
      case 42:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 44:
         jjmatchedKind = 57;
         return jjMoveNfa_0(0, 0);
      case 46:
         jjmatchedKind = 51;
         return jjMoveNfa_0(0, 0);
      case 58:
         jjmatchedKind = 60;
         return jjMoveNfa_0(0, 0);
      case 59:
         jjmatchedKind = 50;
         return jjMoveNfa_0(0, 0);
      case 61:
         jjmatchedKind = 56;
         return jjMoveNfa_0(0, 0);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 91:
         jjmatchedKind = 58;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 59;
         return jjMoveNfa_0(0, 0);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20007c0000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1010000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x38000020000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2e000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x300000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 123:
         jjmatchedKind = 54;
         return jjMoveNfa_0(0, 0);
      case 125:
         jjmatchedKind = 55;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40020000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x101000000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2001000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x20807c4000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x200812000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x38000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x24000000000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x20040000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8200000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10002008000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x138000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x81000000L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000780800L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 51:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 54:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 56:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 3;
         }
         break;
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400008000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 100:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 3;
         }
         break;
      case 101:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 3;
         }
         break;
      case 103:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x98000000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x20040000000L);
      case 109:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 3;
         }
         break;
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 114:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x101000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2020010000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 50:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 4;
         }
         break;
      case 52:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 4;
         }
         break;
      case 54:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 4;
         }
         break;
      case 84:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 4;
         }
         break;
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8001020000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20100000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x12000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x18000000L);
      case 114:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         break;
      case 116:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 4;
         }
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 84:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 5;
         }
         break;
      case 99:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 5;
         }
         break;
      case 103:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1020000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 6;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 7;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 8;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 63;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(1);
                  }
                  else if (curChar == 47)
                     jjAddStates(26, 27);
                  else if (curChar == 36)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAdd(32);
                  }
                  else if (curChar == 39)
                     jjAddStates(28, 29);
                  else if (curChar == 34)
                     jjCheckNAddStates(30, 32);
                  else if (curChar == 48)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 48 && kind > 7)
                     kind = 7;
                  break;
               case 3:
                  if (curChar == 34)
                     jjCheckNAddStates(30, 32);
                  break;
               case 4:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 6:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 7:
                  if (curChar == 34 && kind > 8)
                     kind = 8;
                  break;
               case 8:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(33, 36);
                  break;
               case 9:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 10:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 12:
                  if (curChar == 39)
                     jjAddStates(28, 29);
                  break;
               case 13:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if (curChar == 39 && kind > 9)
                     kind = 9;
                  break;
               case 16:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 14);
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 19:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 22:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjAddStates(37, 39);
                  break;
               case 23:
                  if ((0x2400L & l) != 0L && kind > 42)
                     kind = 42;
                  break;
               case 24:
                  if (curChar == 10 && kind > 42)
                     kind = 42;
                  break;
               case 25:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 31:
                  if (curChar != 36)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(32);
                  break;
               case 34:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjAddStates(0, 2);
                  break;
               case 35:
                  if ((0x2400L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 36:
                  if (curChar == 10 && kind > 46)
                     kind = 46;
                  break;
               case 37:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 51:
                  if (curChar == 47)
                     jjAddStates(26, 27);
                  break;
               case 52:
                  if (curChar == 47)
                     jjCheckNAddStates(40, 42);
                  break;
               case 53:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 54:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 55:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 56:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 58:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if (curChar == 42)
                     jjCheckNAddStates(43, 45);
                  break;
               case 60:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 59);
                  break;
               case 61:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 59);
                  break;
               case 62:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAdd(32);
                  }
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 98)
                     jjAddStates(46, 47);
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 5:
                  if (curChar == 92)
                     jjAddStates(48, 50);
                  break;
               case 6:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 13:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 92)
                     jjAddStates(51, 53);
                  break;
               case 16:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 21:
                  if (curChar == 97)
                     jjCheckNAddStates(37, 39);
                  break;
               case 22:
                  jjCheckNAddStates(37, 39);
                  break;
               case 26:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 27:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
               case 32:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 34:
                  jjCheckNAddStates(0, 2);
                  break;
               case 38:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 39:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 98)
                     jjAddStates(46, 47);
                  break;
               case 42:
                  if (curChar == 110 && kind > 10)
                     kind = 10;
                  break;
               case 43:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 108 && kind > 10)
                     kind = 10;
                  break;
               case 49:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 53:
                  jjAddStates(40, 42);
                  break;
               case 58:
                  jjCheckNAddTwoStates(58, 59);
                  break;
               case 60:
               case 61:
                  jjCheckNAddTwoStates(61, 59);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(30, 32);
                  break;
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(37, 39);
                  break;
               case 34:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               case 53:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(40, 42);
                  break;
               case 58:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 60:
               case 61:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(61, 59);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 63 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   34, 35, 37, 39, 10, 40, 33, 1, 2, 4, 12, 13, 29, 17, 18, 20, 
   21, 22, 24, 17, 18, 26, 20, 19, 25, 27, 52, 57, 13, 15, 4, 5, 
   7, 4, 5, 9, 7, 22, 23, 25, 53, 54, 56, 59, 60, 62, 47, 50, 
   6, 8, 10, 16, 17, 19, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, 
"\142\171\164\145", "\143\150\141\162", "\144\157\165\142\154\145", "\145\156\165\155", 
"\146\154\157\141\164", "\155\157\144\165\154\145", "\160\141\143\153\141\147\145", "\151\156\164", 
"\151\156\164\70", "\151\156\164\61\66", "\151\156\164\63\62", "\151\156\164\66\64", 
"\154\157\156\147", "\155\145\163\163\141\147\145", "\163\150\157\162\164", "\163\151\172\145", 
"\163\164\162\151\156\147", "\123\164\162\151\156\147", "\163\164\162\165\143\164", 
"\164\141\142\154\145", "\165\156\163\151\147\156\145\144", "\166\145\162\163\151\157\156", 
"\166\157\151\144", "\167\143\150\141\162", "\52", "\52\46", null, null, 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", null, null, 
null, null, null, null, null, null, "\73", "\56", "\50", "\51", "\173", "\175", 
"\75", "\54", "\133", "\135", "\72", "\43", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "CODESTATE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x3fff0fffffffff81L, 
};
static final long[] jjtoSkip = {
   0xc0000000007eL, 
};
static final long[] jjtoSpecial = {
   0xc00000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[63];
private final int[] jjstateSet = new int[126];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public IDLTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public IDLTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 63; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
