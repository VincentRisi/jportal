/* Generated By:JavaCC: Do not edit this line. PickleTokenManager.java */
package bbd.pickle;
import java.util.*;
import java.lang.*;
import java.io.*;

/** Token Manager. */
public class PickleTokenManager implements PickleConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
static private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(20, 0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 20;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 20:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                  }
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(0, 15);
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 0:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(0, 15);
                  break;
               case 1:
                  if (curChar == 45)
                     jjCheckNAddStates(3, 5);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 76)
                     kind = 76;
                  break;
               case 4:
                  if (curChar == 10 && kind > 76)
                     kind = 76;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 14:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 17:
                  if ((0x2400L & l) != 0L && kind > 77)
                     kind = 77;
                  break;
               case 18:
                  if (curChar == 10 && kind > 77)
                     kind = 77;
                  break;
               case 19:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 20:
               case 16:
                  jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  jjAddStates(3, 5);
                  break;
               case 7:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 20:
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(3, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 20 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(3, 0);
      case 10:
         jjmatchedKind = 3;
         return jjMoveNfa_0(3, 0);
      case 13:
         jjmatchedKind = 4;
         return jjMoveNfa_0(3, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(3, 0);
      case 40:
         jjmatchedKind = 59;
         return jjMoveNfa_0(3, 0);
      case 41:
         jjmatchedKind = 60;
         return jjMoveNfa_0(3, 0);
      case 44:
         jjmatchedKind = 5;
         return jjMoveNfa_0(3, 0);
      case 47:
         jjmatchedKind = 63;
         return jjMoveNfa_0(3, 0);
      case 58:
         jjmatchedKind = 58;
         return jjMoveNfa_0(3, 0);
      case 61:
         jjmatchedKind = 64;
         return jjMoveNfa_0(3, 0);
      case 64:
         jjmatchedKind = 57;
         return jjMoveNfa_0(3, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x300L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0xc00L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0xa000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x70000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 75:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x3000000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x38000000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x340000000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0xc00000000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x3000000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0xec000000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x700000000000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0xe800000000000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0xf0000000000000L);
      case 95:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x300L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0xc00L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xa000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x70000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x3000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x38000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x340000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0xc00000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x3000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xec000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x700000000000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0xe800000000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0xf0000000000000L);
      case 123:
         jjmatchedKind = 61;
         return jjMoveNfa_0(3, 0);
      case 125:
         jjmatchedKind = 62;
         return jjMoveNfa_0(3, 0);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 0);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x30100400032000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000f000840000L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000008000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x80640001000400L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x100100L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x1e000800L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000200L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0xe000000000000L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x80220000000L);
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x30100400032000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000f000840000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000008000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x80640001000400L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100100L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1e000800L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000200L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0xe000000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x80220000000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L);
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 69:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8c000000008000L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000400L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x800800200000L);
      case 76:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x30002020040000L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x600000000000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x7000000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000800L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000200L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x40008000000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x400002000L);
      case 84:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x240030000L);
      case 89:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
         }
         break;
      case 90:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8c000000008000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000400L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800800200000L);
      case 108:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x30002020040000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x600000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x7000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000800L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000200L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40008000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400002000L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x240030000L);
      case 121:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
         }
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 2);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0xa000L);
      case 69:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x440104060000L);
      case 71:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x10001040000000L);
      case 75:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 3;
         }
         break;
      case 76:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000a00L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x80200000000L);
      case 81:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
      case 82:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000400000400L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x20004000000000L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 87:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0xa000L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x440104060000L);
      case 103:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10001040000000L);
      case 107:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 3;
         }
         break;
      case 108:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000a00L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x80200000000L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
      case 114:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000400000400L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20004000000000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 119:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 3);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x800002000L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L);
      case 69:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000c00L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000200200L);
      case 75:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 4;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000040000000L);
      case 82:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 4;
         }
         break;
      case 83:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8401000000000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000060000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x800200000000L);
      case 87:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 89:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x800002000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L);
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000c00L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000200200L);
      case 107:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 4;
         }
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000040000000L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 4;
         }
         break;
      case 115:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8401000000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000060000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x800200000000L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 121:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(3, 4);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 4);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000010000800L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 69:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 5;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x82000020000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x80004040000000L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000400000000L);
      case 81:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 82:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 84:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8401000200000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000010000800L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 5;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x82000020000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x80004040000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000400000000L);
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 116:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8401000200000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 5);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x8400000000200L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      case 69:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      case 78:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 6;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x1400000000L);
      case 83:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 6;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 89:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 6;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8400000000200L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      case 110:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 6;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x1400000000L);
      case 115:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 6;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 121:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 6;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(3, 6);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 6);
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 7;
         }
         break;
      case 69:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0x8400000000000L);
      case 78:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 7;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 89:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 7;
         }
         break;
      case 95:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 7;
         }
         break;
      case 100:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 7;
         }
         break;
      case 101:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x8400000000000L);
      case 110:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 7;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 121:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 7;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(3, 7);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 7);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      case 80:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 8;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      case 112:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 8;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(3, 8);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 8);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x200L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x200L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 9);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 9);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 10;
         }
         break;
      case 78:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 10;
         }
         break;
      case 101:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 10;
         }
         break;
      case 110:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 10;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(3, 10);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 153;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAddStates(6, 13);
                  }
                  else if (curChar == 47)
                     jjAddStates(14, 15);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 83;
                  else if (curChar == 39)
                     jjCheckNAddStates(16, 18);
                  else if (curChar == 34)
                     jjCheckNAddStates(19, 21);
                  else if (curChar == 46)
                     jjCheckNAdd(51);
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if (curChar == 42)
                     jjCheckNAddStates(22, 24);
                  break;
               case 45:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 46:
               case 47:
                  if (curChar == 10 && kind > 56)
                     kind = 56;
                  break;
               case 48:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 50:
                  if (curChar == 46)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddStates(25, 27);
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddTwoStates(54, 55);
                  break;
               case 56:
                  if (curChar == 34)
                     jjCheckNAddStates(19, 21);
                  break;
               case 57:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 59:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 60:
                  if (curChar == 34 && kind > 68)
                     kind = 68;
                  break;
               case 61:
                  if (curChar == 39)
                     jjCheckNAddStates(16, 18);
                  break;
               case 62:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 64:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 65:
                  if (curChar == 39 && kind > 68)
                     kind = 68;
                  break;
               case 67:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 71:
                  if ((0x3ff001800000000L & l) != 0L)
                     jjAddStates(28, 29);
                  break;
               case 72:
                  if (curChar == 39 && kind > 72)
                     kind = 72;
                  break;
               case 73:
                  if (curChar == 45)
                     jjCheckNAddStates(30, 32);
                  break;
               case 74:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 75:
                  if ((0x2400L & l) != 0L && kind > 75)
                     kind = 75;
                  break;
               case 76:
                  if (curChar == 10 && kind > 75)
                     kind = 75;
                  break;
               case 77:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 83:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 125:
                  if (curChar == 47)
                     jjAddStates(14, 15);
                  break;
               case 126:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(127, 128);
                  break;
               case 127:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(127, 128);
                  break;
               case 128:
                  if (curChar == 42)
                     jjAddStates(33, 34);
                  break;
               case 129:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(130, 128);
                  break;
               case 130:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(130, 128);
                  break;
               case 131:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 132:
                  if (curChar == 47)
                     jjCheckNAddStates(35, 37);
                  break;
               case 133:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 134:
               case 135:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 136:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAddStates(6, 13);
                  break;
               case 138:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(138);
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(139, 140);
                  break;
               case 140:
                  if (curChar != 46)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddStates(38, 40);
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddStates(38, 40);
                  break;
               case 143:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(144);
                  break;
               case 144:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddTwoStates(144, 55);
                  break;
               case 145:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(145, 146);
                  break;
               case 147:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(148);
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddTwoStates(148, 55);
                  break;
               case 149:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(41, 43);
                  break;
               case 151:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(152);
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(152, 55);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(67);
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjAddStates(44, 46);
                  else if ((0x8000000080000L & l) != 0L)
                     jjAddStates(47, 48);
                  else if ((0x20000000200000L & l) != 0L)
                     jjAddStates(49, 50);
                  else if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 0:
                  if ((0x2000000020L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 1:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((0x10000000100000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 5:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x4000000040000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 12:
               case 15:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 13:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x10000000100000L & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 23:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x2000000020L & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 28:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x4000000040000L & l) != 0L && kind > 31)
                     kind = 31;
                  break;
               case 34:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x1000000010000L & l) != 0L && kind > 31)
                     kind = 31;
                  break;
               case 39:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 45:
                  jjAddStates(22, 24);
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(51, 52);
                  break;
               case 55:
                  if ((0x5000000050L & l) != 0L && kind > 66)
                     kind = 66;
                  break;
               case 57:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 58:
                  if (curChar == 92)
                     jjCheckNAddStates(53, 56);
                  break;
               case 59:
                  if (curChar == 92)
                     jjCheckNAddStates(19, 21);
                  break;
               case 62:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 63:
                  if (curChar == 92)
                     jjCheckNAddStates(57, 60);
                  break;
               case 64:
                  if (curChar == 92)
                     jjCheckNAddStates(16, 18);
                  break;
               case 66:
               case 67:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(67);
                  break;
               case 68:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 70:
               case 71:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 74:
                  jjAddStates(30, 32);
                  break;
               case 79:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 85:
                  if ((0x20000000200000L & l) != 0L)
                     jjAddStates(49, 50);
                  break;
               case 86:
                  if ((0x2000000020L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 87:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if ((0x4000000040000L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 95:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(47, 48);
                  break;
               case 99:
                  if ((0x10000000100000L & l) != 0L && kind > 40)
                     kind = 40;
                  break;
               case 100:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(99);
                  break;
               case 101:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(99);
                  break;
               case 104:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if ((0x20000000200L & l) != 0L)
                     jjAddStates(44, 46);
                  break;
               case 110:
                  if ((0x10000000100000L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 111:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if ((0x4000000040000L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 113:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if ((0x200000002000000L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 119:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 127:
                  jjCheckNAddTwoStates(127, 128);
                  break;
               case 129:
               case 130:
                  jjCheckNAddTwoStates(130, 128);
                  break;
               case 133:
                  jjAddStates(35, 37);
                  break;
               case 142:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(61, 62);
                  break;
               case 146:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(63, 64);
                  break;
               case 150:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(65, 66);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 45:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(22, 24);
                  break;
               case 57:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(19, 21);
                  break;
               case 62:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(16, 18);
                  break;
               case 74:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(30, 32);
                  break;
               case 127:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(127, 128);
                  break;
               case 129:
               case 130:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(130, 128);
                  break;
               case 133:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(35, 37);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 153 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   16, 17, 19, 2, 3, 5, 138, 139, 140, 145, 146, 149, 150, 55, 126, 132, 
   62, 63, 65, 57, 58, 60, 45, 46, 48, 51, 52, 55, 71, 72, 74, 75, 
   77, 129, 131, 133, 134, 136, 141, 142, 55, 149, 150, 55, 111, 117, 124, 102, 
   108, 93, 97, 53, 54, 57, 58, 59, 60, 62, 63, 64, 65, 143, 144, 147, 
   148, 151, 152, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\100", "\72", "\50", "\51", "\173", "\175", "\57", "\75", null, null, 
null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "CODESTATE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   1, 0, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0x2197L, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x1800L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x1800L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[153];
static private final int[] jjstateSet = new int[306];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public PickleTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public PickleTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 153; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
