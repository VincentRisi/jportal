/* Generated By:JavaCC: Do not edit this line. Pickle.java */
package bbd.pickle;

import java.util.*;
import java.lang.*;
import java.io.*;

/**
* JDBC Application Definition Compiler and Generator
*/
public class Pickle implements PickleConstants {
  protected static Application application;
  protected static Table       table;
  protected static Relation    relation;
  protected static Validation  validation;
  protected static Field       field;
  protected static Enum        en;
  protected static Value       value;
  protected static Link        link;
  protected static Key         key;
  static private Pickle parser;
  static private boolean parser_initialised = false;
  static private boolean fieldsNullByDefault = false;
  /**
  * Reads input from standard input
  */
  public static void main(String args[])
  {
    try
    {
      PrintWriter outLog = new PrintWriter(System.out);
      for (int i = 0; i <args.length; i++)
      {
        System.out.println(args[i]+": Parsing ...");
        setFieldsNullState(false);
        Application application = run(args[i], outLog);
        System.out.println("Outputting "+application.name+".repository");
        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(application.name+".repository"));
        out.writeObject(application);
        out.close();
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }
  /**
  * Reads input from supplied file
  * @param  inFile is the input file to parse
  * @return Table from jbdcdef package
  */
  public static Application run(String inFile, PrintWriter outLog)
  {
    try
    {
      FileReader reader = new FileReader(inFile);
      return run(reader, outLog);
    }
    catch (FileNotFoundException e)
    {
      e.printStackTrace();
      return null;
    }
  }
  public static Application run(Reader reader, PrintWriter outLog)
  {
    try
    {
      if (!parser_initialised)
      {
        parser = new Pickle(reader);
        parser_initialised = true;
      }
      else
        parser.ReInit(reader);
      parser.pickStart();
      return application;
    }
    catch (Exception e)
    {
      outLog.println("ParseException ["+e.getMessage()+"]");
      e.printStackTrace();
      return null;
    }
  }
  /**
  * How to create tables null field state
  */
  public static void setFieldsNullState(boolean state)
  {
    fieldsNullByDefault = state;
  }
  public static Application loadBinFile(String inFile)
  {
    return application;
  }
  static String fixString(String s)
  {
    return s.substring(1, s.length()-1);
  }

// Parser starting point
  static final public void pickStart() throws ParseException {
  String s;
    jj_consume_token(APPLICATION);
    s = pickIdent();
    application = new Application();
    application.name = s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      s = pickString();
      application.descr = s;
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTPUT:
        jj_consume_token(OUTPUT);
        s = pickIdentOrString();
      application.output = s;
        break;
      case SERVER:
        jj_consume_token(SERVER);
        s = pickIdentOrString();
      application.server = s;
        break;
      case USER:
        jj_consume_token(USER);
        s = pickIdentOrString();
      application.user = s;
        break;
      case PASSWORD:
        jj_consume_token(PASSWORD);
        s = pickIdentOrString();
      application.password = s;
        break;
      case REGISTRY:
        jj_consume_token(REGISTRY);
        s = pickIdentOrString();
      application.registry = s;
        break;
      case VERSION:
        jj_consume_token(VERSION);
        s = pickIdentOrString();
      application.version = s;
        break;
      case FLAGS:
        jj_consume_token(FLAGS);
        label_2:
        while (true) {
          s = pickIdentOrString();
        application.flags.addElement(s);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING:
          case IDENTIFIER:
          case LIDENTIFIER:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
        }
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLAGS:
      case OUTPUT:
      case PASSWORD:
      case REGISTRY:
      case SERVER:
      case USER:
      case VERSION:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUPPLIED:
      jj_consume_token(SUPPLIED);
      pickSupplieds();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIZES:
      jj_consume_token(SIZES);
      jj_consume_token(LEFTPAREN);
      application.charSize = pickNumber();
      application.descrSize = pickNumber();
      jj_consume_token(RIGHTPAREN);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TABLE:
        pickTable();
      if (application.hasTable(table.name))
        System.out.println(table.name+" is already present");
      else
      {
        application.checkMissing(table);
        application.tables.addElement(table);
      }
        break;
      case RELATION:
        pickRelation();
      application.checkMissing(relation);
      application.relations.addElement(relation);
        break;
      case VALIDATE:
        pickValidate();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RELATION:
      case TABLE:
      case VALIDATE:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(0);
  }

  static final public void pickSupplieds() throws ParseException {
  String s;
    label_4:
    while (true) {
      pickField();
      if (application.hasSupplied(field.name))
        System.out.println(field.name+" is already present");
      else
        application.supplieds.addElement(field);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case LIDENTIFIER:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
    }
  }

  static final public String pickIdentOrString() throws ParseException {
  Token t;
  String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case LIDENTIFIER:
      s = pickIdent();
    {if (true) return s;}
      break;
    case STRING:
      t = jj_consume_token(STRING);
    s = t.image;
    {if (true) return fixString(s);}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Identifiers may be DEF keywords if they are escaped using L'x'
  static final public String pickIdent() throws ParseException {
  Token t;
  String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
    {if (true) return t.image;}
      break;
    case LIDENTIFIER:
      t = jj_consume_token(LIDENTIFIER);
    s = t.image;
    {if (true) return s.substring(2, s.length()-1);}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void pickValidate() throws ParseException {
  Token t;
  String s;
    jj_consume_token(VALIDATE);
    validation = new Validation();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
      jj_consume_token(ALL);
      application.validationAll = validation;
      break;
    case OTHER:
      jj_consume_token(OTHER);
      application.validationOther = validation;
      break;
    case INIT:
      jj_consume_token(INIT);
      application.validationInit = validation;
      break;
    case IDENTIFIER:
    case LIDENTIFIER:
      s = pickIdent();
      Table table = application.getTable(s);
      Relation relation = application.getRelation(s);
      boolean added = false;
      if (table == null)
      {
        if (relation == null)
          System.out.println("Table " + s + " to validate does not exist yet");
        application.missingValidations.addElement(new Application.ValidationTable(validation, s));
        added = true;
      }
      else
      {
        table.validation = validation;
      }
      if (relation == null)
      {
        if (table == null)
          System.out.println("Relation " + s + " to validate does not exist yet");
        if (added == false)
          application.missingValidations.addElement(new Application.ValidationTable(validation, s));
      }
      else
      {
        relation.validation = validation;
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_5:
    while (true) {
      t = jj_consume_token(CODELINE);
      validation.code.addElement(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CODELINE:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
    }
  }

  static final public void pickTable() throws ParseException {
  Token t;
  String s;
    jj_consume_token(TABLE);
    s = pickIdent();
    table = new Table();
    table.application = application;
    table.name = s;
    table.descr = s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      s = pickString();
                       table.descr = s;
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTPAREN:
      s = pickAlias();
                      table.alias = s;
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHECK:
      case NODOMAIN:
      case NULL:
      case VIEWONLY:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIEWONLY:
        jj_consume_token(VIEWONLY);
      table.viewOnly = true;
        break;
      case NODOMAIN:
        jj_consume_token(NODOMAIN);
      table.noDomain = true;
        break;
      case NULL:
        jj_consume_token(NULL);
      table.isNullable = true;
        break;
      case CHECK:
        jj_consume_token(CHECK);
        s = pickString();
      table.check = s;
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      s = pickComment();
      table.comments.addElement(s);
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPTIONS:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_8;
      }
      jj_consume_token(OPTIONS);
      label_9:
      while (true) {
        s = pickString();
        table.options.addElement(s);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_9;
        }
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case LIDENTIFIER:
      pickFields();
      break;
    case USE:
      pickUse();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VALUE:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_10;
      }
      pickValues(0);
    }
  }

  static final public void pickUse() throws ParseException {
    jj_consume_token(USE);
    jj_consume_token(LEFTPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
      jj_consume_token(CHAR);
      table.useChar = true;
      field = new Field();
      field.name = "Id";
      field.type = field.CHAR;
      field.length = application.charSize;
      table.fields.addElement(field);
      table.order.addElement(field);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN:
      case NUMBER:
        pickCharsize();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      field = new Field();
      field.name = "Descr";
      field.type = field.CHAR;
      field.length = application.descrSize;
      table.fields.addElement(field);
      break;
    case SEQUENCE:
      jj_consume_token(SEQUENCE);
      table.useSequence = true;
      field = new Field();
      field.name = "Id";
      field.type = field.SEQUENCE;
      field.length = 4;
      table.fields.addElement(field);
      table.order.addElement(field);
      field = new Field();
      field.name = "Descr";
      field.type = field.CHAR;
      field.length = application.descrSize;
      table.fields.addElement(field);
      break;
    case BIGSEQUENCE:
      jj_consume_token(BIGSEQUENCE);
      table.useBigSequence = true;
      field = new Field();
      field.name = "Id";
      field.type = field.BIGSEQUENCE;
      field.length = 8;
      table.fields.addElement(field);
      table.order.addElement(field);
      field = new Field();
      field.name = "Descr";
      field.type = field.CHAR;
      field.length = application.descrSize;
      table.fields.addElement(field);
      break;
    case INT:
      jj_consume_token(INT);
      table.useSequence = true;
      field = new Field();
      field.name = "Id";
      field.type = field.INT;
      field.length = 4;
      table.fields.addElement(field);
      table.order.addElement(field);
      field = new Field();
      field.name = "Descr";
      field.type = field.CHAR;
      field.length = application.descrSize;
      table.fields.addElement(field);
      break;
    case LONG:
      jj_consume_token(LONG);
      table.useBigSequence = true;
      field = new Field();
      field.name = "Id";
      field.type = field.LONG;
      field.length = 4;
      table.fields.addElement(field);
      table.order.addElement(field);
      field = new Field();
      field.name = "Descr";
      field.type = field.CHAR;
      field.length = application.descrSize;
      table.fields.addElement(field);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RIGHTPAREN);
  }

  static final public void pickFields() throws ParseException {
  String s;
    label_11:
    while (true) {
      pickField();
      if (table.hasField(field.name))
        System.out.println(field.name+" is already present");
      else
        table.fields.addElement(field);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case LIDENTIFIER:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_11;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDER:
      jj_consume_token(ORDER);
      jj_consume_token(LEFTPAREN);
      label_12:
      while (true) {
        s = pickIdent();
        if (table.hasField(s))
        {
          field = table.getField(s);
          table.order.addElement(field);
        }
        else
          System.out.println(s+" is not one of the tables fields");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SLASH:
          jj_consume_token(SLASH);
          table.breaks.addElement(field);
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case LIDENTIFIER:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_12;
        }
      }
      jj_consume_token(RIGHTPAREN);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHOW:
      jj_consume_token(SHOW);
      jj_consume_token(LEFTPAREN);
      label_13:
      while (true) {
        s = pickIdent();
        if (table.hasField(s))
        {
          field = table.getField(s);
          table.show.addElement(field);
        }
        else
          System.out.println(s+" is not one of the tables fields");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case LIDENTIFIER:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_13;
        }
      }
      jj_consume_token(RIGHTPAREN);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEY:
      case LINK:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINK:
        jj_consume_token(LINK);
        s = pickIdent();
      link = new Link();
      table.links.addElement(link);
      link.table = application.getTable(s);
      if (link.table == null)
      {
        System.out.println(table.name + " table link " + s + " to does not exist yet");
        application.missingLinks.addElement(new Application.LinkTable(link, s));
      }
        jj_consume_token(LEFTPAREN);
        label_15:
        while (true) {
          s = pickIdent();
        if (table.hasField(s))
          link.list.addElement(s);
        else
          System.out.println(s+" is not one of the tables fields");
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
          case LIDENTIFIER:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            break label_15;
          }
        }
        jj_consume_token(RIGHTPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASCADE:
        case DELETE:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DELETE:
            jj_consume_token(DELETE);
            break;
          default:
            jj_la1[32] = jj_gen;
            ;
          }
          jj_consume_token(CASCADE);
        link.hasCascade = true;
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        break;
      case KEY:
        jj_consume_token(KEY);
        s = pickIdent();
      key = new Key();
      key.name = s;
      table.keys.addElement(key);
        jj_consume_token(LEFTPAREN);
        label_16:
        while (true) {
          s = pickIdent();
        if (table.hasField(s))
        {
          field = table.getField(s);
          key.list.addElement(field);
        }
        else
          System.out.println(s+" is not one of the tables fields");
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
          case LIDENTIFIER:
            ;
            break;
          default:
            jj_la1[34] = jj_gen;
            break label_16;
          }
        }
        jj_consume_token(RIGHTPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PRIMARY:
        case UNIQUE:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case UNIQUE:
            jj_consume_token(UNIQUE);
        key.unique = true;
            break;
          case PRIMARY:
            jj_consume_token(PRIMARY);
        key.primary = true;
            break;
          default:
            jj_la1[35] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[36] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void pickField() throws ParseException {
  String s;
    s = pickIdent();
    field = new Field();
    field.name = s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTPAREN:
      s = pickAlias();
                      field.alias = s;
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    pickDatatype();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHECK:
      case NOT:
      case NULL:
      case UPPERCASE:
      case COMMENT:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        s = pickComment();
     field.comments.addElement(s);
        break;
      case NOT:
        jj_consume_token(NOT);
        jj_consume_token(NULL);
     field.isNull = false;
        break;
      case NULL:
        jj_consume_token(NULL);
     field.isNull = true;
        break;
      case UPPERCASE:
        jj_consume_token(UPPERCASE);
     field.isUppercase = true;
        break;
      case CHECK:
        jj_consume_token(CHECK);
        s = pickString();
     field.check = s;
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public String pickAlias() throws ParseException {
  String alias;
    jj_consume_token(LEFTPAREN);
    alias = pickIdent();
    jj_consume_token(RIGHTPAREN);
    {if (true) return alias;}
    throw new Error("Missing return statement in function");
  }

  static final public void pickDatatype() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
    field.type = field.BOOLEAN;
    field.length = 1;
      break;
    case BYTE:
      jj_consume_token(BYTE);
    field.type = field.BYTE;
    field.length = 1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN:
        pickEnums();
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      break;
    case CHAR:
      jj_consume_token(CHAR);
    field.type = field.CHAR;
    field.length = 1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN:
      case NUMBER:
        pickCharsize();
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTBRACE:
        pickCharEnums();
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      break;
    case SHORT:
      jj_consume_token(SHORT);
    field.type = field.SHORT;
    field.length = 2;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN:
        pickEnums();
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      break;
    case INT:
      jj_consume_token(INT);
    field.type = field.INT;
    field.length = 4;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN:
        pickEnums();
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      break;
    case SEQUENCE:
      jj_consume_token(SEQUENCE);
    field.type = field.SEQUENCE;
    field.length = 4;
      break;
    case BIGSEQUENCE:
      jj_consume_token(BIGSEQUENCE);
    field.type = field.BIGSEQUENCE;
    field.length = 8;
      break;
    case LONG:
      jj_consume_token(LONG);
    field.type = field.LONG;
    field.length = 8;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN:
        pickEnums();
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      break;
    case DATE:
      jj_consume_token(DATE);
    field.type = field.DATE;
    field.length = 8;
      break;
    case DATETIME:
      jj_consume_token(DATETIME);
    field.type = field.DATETIME;
    field.length = 14;
      break;
    case TIME:
      jj_consume_token(TIME);
    field.type = field.TIME;
    field.length = 6;
      break;
    case TIMESTAMP:
      jj_consume_token(TIMESTAMP);
    field.type = field.TIMESTAMP;
    field.length = 14;
      break;
    case USERSTAMP:
      jj_consume_token(USERSTAMP);
    field.type = field.USERSTAMP;
    field.length = 8;
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
    field.type = field.DOUBLE;
    field.length = 8;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN:
        pickFloatsize();
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void pickEnums() throws ParseException {
  String s;
  int n;
    jj_consume_token(LEFTPAREN);
    label_18:
    while (true) {
      s = pickIdent();
      jj_consume_token(ASSIGN);
      n = pickNumber();
      en = new Enum();
      en.name = s;
      en.value = n;
      field.enums.addElement(en);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case LIDENTIFIER:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_18;
      }
    }
    jj_consume_token(RIGHTPAREN);
  }

  static final public void pickCharEnums() throws ParseException {
  String s;
  int n;
    jj_consume_token(LEFTBRACE);
    label_19:
    while (true) {
      s = pickIdent();
      jj_consume_token(ASSIGN);
      n = pickNumber();
      en = new Enum();
      en.name = s;
      en.value = n;
      field.enums.addElement(en);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case LIDENTIFIER:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_19;
      }
    }
    jj_consume_token(RIGHTBRACE);
  }

  static final public void pickFloatsize() throws ParseException {
  int n;
    jj_consume_token(LEFTPAREN);
    n = pickNumber();
    field.precision = n;
    n = pickNumber();
    field.scale = n;
    jj_consume_token(RIGHTPAREN);
  }

  static final public void pickCharsize() throws ParseException {
  int n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTPAREN:
      jj_consume_token(LEFTPAREN);
      n = pickNumber();
    field.length = n;
      jj_consume_token(RIGHTPAREN);
      break;
    case NUMBER:
      n = pickNumber();
    field.length = n;
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public int pickNumber() throws ParseException {
  Token t;
  String s;
  Integer i;
    t = jj_consume_token(NUMBER);
    s = t.image;
    i = new Integer(s);
    {if (true) return i.intValue();}
    throw new Error("Missing return statement in function");
  }

  static final public void pickValues(int state) throws ParseException {
  String s;
    jj_consume_token(VALUE);
    label_20:
    while (true) {
      jj_consume_token(LEFTPAREN);
        value = new Value();
        if (state == 0)
          table.values.addElement(value);
        else
          relation.values.addElement(value);
      pickValue();
      label_21:
      while (true) {
        pickValue();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case FLOATING:
        case STRING:
        case IDENTIFIER:
        case LIDENTIFIER:
          ;
          break;
        default:
          jj_la1[52] = jj_gen;
          break label_21;
        }
      }
      jj_consume_token(RIGHTPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_20;
      }
    }
  }

  static final public void pickValue() throws ParseException {
  String s;
    s = pickNIS();
    value.list.addElement(s);
  }

  static final public String pickNIS() throws ParseException {
  Token t;
  String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
    s = t.image;
    {if (true) return s;}
      break;
    case FLOATING:
      t = jj_consume_token(FLOATING);
    s = t.image;
    {if (true) return s;}
      break;
    case STRING:
    case IDENTIFIER:
    case LIDENTIFIER:
      s = pickIdentOrString();
    {if (true) return s;}
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void pickRelation() throws ParseException {
  String s;
  int from=0;
  int to=0;
    jj_consume_token(RELATION);
    s = pickIdent();
    relation = new Relation();
    relation.application = application;
    relation.name = s;
    relation.descr = s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      s = pickString();
                       relation.descr = s;
      break;
    default:
      jj_la1[55] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTPAREN:
      s = pickAlias();
                       relation.alias = s;
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_22;
      }
      s = pickComment();
                        relation.comments.addElement(s);
    }
    s = pickIdent();
    relation.fromTable = application.getTable(s);
    if (relation.fromTable == null)
    {
      System.out.println(relation.name + " from relation table " + s + " does not exist yet");
      application.missingRelations.addElement(new Application.RelationTable(relation, s, true));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      relation.fromShort = pickIdent();
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    jj_consume_token(LEFTPAREN);
    label_23:
    while (true) {
      s = pickIdent();
      relation.fromFieldNames.addElement(s);
      System.out.println("From " + s);
      if (relation.fromTable != null)
      {
        Field field = relation.fromTable.getPKField(from);
        System.out.println("From " + field.name + ":" + from + " = " + s);
        relation.fromFields.addElement(field);
        from++;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case LIDENTIFIER:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_23;
      }
    }
    jj_consume_token(RIGHTPAREN);
    s = pickIdent();
    relation.toTable = application.getTable(s);
    if (relation.toTable == null)
    {
      System.out.println(relation.name + " to relation table " + s + " does not exist yet");
      application.missingRelations.addElement(new Application.RelationTable(relation, s, false));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      relation.toShort = pickIdent();
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
    jj_consume_token(LEFTPAREN);
    label_24:
    while (true) {
      s = pickIdent();
      relation.toFieldNames.addElement(s);
      System.out.println("To " + s);
      if (relation.toTable != null)
      {
        Field field = relation.toTable.getPKField(to);
        System.out.println("To " + field.name + ":" + to + " = " + s);
        relation.toFields.addElement(field);
        to++;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case LIDENTIFIER:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_24;
      }
    }
    jj_consume_token(RIGHTPAREN);
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VALUE:
        ;
        break;
      default:
        jj_la1[62] = jj_gen;
        break label_25;
      }
      pickValues(1);
    }
  }

  static final public String pickString() throws ParseException {
  Token t;
  String s;
    t = jj_consume_token(STRING);
    s = t.image;
    {if (true) return fixString(s);}
    throw new Error("Missing return statement in function");
  }

  static final public String pickComment() throws ParseException {
  Token t;
  String s;
  int n;
    t = jj_consume_token(COMMENT);
    s = t.image;
    while (s.indexOf('*') == 0)
      s = s.substring(1);
    n = s.indexOf('\u005cr');
    if (n == -1)
    {
      n = s.indexOf('\u005cn');
      if (n == -1)
        n = s.length()-1;
    }
    {if (true) return s.substring(0, n);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public PickleTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[63];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200100,0x0,0x0,0x0,0x30008000,0x30008000,0x0,0x40000000,0x0,0x0,0x0,0x0,0x2404400,0x0,0x0,0x0,0x80000000,0x0,0x0,0x1800000,0x0,0x40000,0x42000,0x0,0x0,0x0,0x1800000,0x0,0x28008000,0x28008000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x24b5c00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x440096,0x440096,0x800,0x400,0x101020,0x101020,0x0,0x0,0x0,0x1,0x0,0x0,0x8000000,0x800000,0x800000,0x1000000,0x0,0x0,0x20000,0x200000,0x8000000,0x40,0x0,0x80000000,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x8008,0x8008,0x0,0x8000000,0x1010000,0x1010000,0x8000000,0x8000000,0x20000000,0x8000000,0x8000000,0x8000000,0x8000000,0x86140,0x0,0x0,0x8000000,0x0,0x8000000,0x0,0x0,0x8000000,0x1000000,0x4000000,0x0,0x4000000,0x0,0x200000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x10,0x190,0x0,0x0,0x0,0x0,0x0,0x0,0x180,0x190,0x180,0x180,0x2000,0x10,0x0,0x0,0x0,0x0,0x0,0x10,0x180,0x0,0x2,0x0,0x180,0x0,0x180,0x0,0x180,0x0,0x0,0x180,0x0,0x0,0x180,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x180,0x180,0x2,0x196,0x0,0x196,0x10,0x0,0x0,0x0,0x180,0x0,0x180,0x0,};
   }

  /** Constructor with InputStream. */
  public Pickle(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Pickle(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PickleTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Pickle(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PickleTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Pickle(PickleTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PickleTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[78];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 63; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 78; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
